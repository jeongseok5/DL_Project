# -*- coding: utf-8 -*-
"""DeepLearning_TermProject_진짜2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Tm6sl_VVcjN4iUEGWm8LSsSvg3fpJgw

### 가위바위보 이미지 분류 using ResNet101
"""

# Google drive mount
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# model
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchsummary import summary
from torch import optim
from torch.optim.lr_scheduler import StepLR
from torch.optim import lr_scheduler

# dataset and transformation
import torchvision
from torchvision import datasets, models
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
import os
from PIL import Image
from glob import glob

# display images
from torchvision import utils
import matplotlib.pyplot as plt
# %matplotlib inline

# utils
import numpy as np
from torchsummary import summary
import time
import copy
from tqdm.notebook import tqdm

### Custom Dataset
class RSPDataset(torch.utils.data.Dataset):
  def __init__(self, path, subset):
    assert subset in ('train', 'val', 'test')
    self.rock_files = glob(path+"/rock/*")
    self.scissors_files = glob(path+"/scissors/*")
    self.paper_files = glob(path+"/paper/*")
    self.images = self.rock_files + self.scissors_files + self.paper_files
    self.labels = [0]*len(self.rock_files) + [1]*len(self.scissors_files)  + [2]*len(self.paper_files)
    self.subset = subset
    # transforms.Compose
    self.transform = {
    'train': transforms.Compose([
                                transforms.RandomResizedCrop(224),
                                transforms.Resize((224, 224)), # transforms.Resize((224,224))
                                transforms.RandomHorizontalFlip(),
                                # transforms.ColorJitter(brightness=1, contrast=0, saturation=0, hue=0),
                                transforms.ToTensor(),
                                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
                               ]),
    'val': transforms.Compose([
                               transforms.Resize((224, 224)),
                               transforms.ToTensor(),
                               transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
                               ]),
    'test': transforms.Compose([
                               transforms.Resize((224,224)),
                               transforms.ToTensor(),
                               transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
                               ])
    }
    self.totensor = self.transform[self.subset]


  def __len__(self):
    return len(self.images)

  def __getitem__(self, idx):
    images = Image.open(self.images[idx]).convert('RGB')
    labels = self.labels[idx]
    return self.totensor(images), labels

# Method for returning filename
  def filename(self, idx):
    filename = self.images[idx].split('/')[-1].split('.')[0]
    return filename
    
# train_image_dataset =
train_dir = os.path.join("/content/drive/MyDrive/Colab Notebooks/DeepLearning_6024/train")

train_data_loader = {x: torch.utils.data.DataLoader(
    RSPDataset(train_dir, x), batch_size=32, shuffle=True, num_workers=2) for x in ['train', 'val']}

dataset_sizes = {x: len(RSPDataset(train_dir, x)) for x in ['train', 'val']}

# Setting "gpu" device
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
print(device)

def train_model(model, criterion, optimizer, scheduler, num_epochs=10):  # 
    since = time.time()
    best_model_wts = copy.deepcopy(model.state_dict()) # 그냥가져오면 reference가 되므로 복제
    best_acc = 0.0
    for epoch in range(num_epochs):
        print(f'Epoch {epoch}/{num_epochs - 1}')
        print('-' * 10)
        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train() # Set model to training mode
            else:
                model.eval() # Set model to evaluate mode
            running_loss = 0.0
            running_corrects = 0
            # Iterate over data.
            for inputs, labels in train_data_loader[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)
            # zero the parameter gradients
                optimizer.zero_grad()
            # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    outputs = model(inputs)
                    _, preds = torch.max(outputs, 1)
                    loss = criterion(outputs, labels)
            # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()
            # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data) #최대 배치크기
            # if phase == 'train':
            #     scheduler.step()
            epoch_loss = running_loss / dataset_sizes[phase]
            epoch_acc = running_corrects.double() / dataset_sizes[phase]
            print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')

            # deep copy the model  # early stopping
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
        print()
    time_elapsed = time.time() - since
    print(f'Training complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')
    print(f'Best val Acc: {best_acc:4f}')
    model.load_state_dict(best_model_wts)
    return model

########################## 처음 모델을 만들때만 사용 ############################
model_conv = models.resnet101(pretrained=True) 

# Parameters of newly constructed modules have requires_grad=True by default
num_ftrs = model_conv.fc.in_features
model_conv.fc = nn.Linear(num_ftrs, 3)

model_conv = model_conv.to(device)

## Loss function
criterion = nn.CrossEntropyLoss().to(device)

optimizer_conv = optim.SGD(model_conv.parameters(), lr=0.1e-3, momentum=0.9)
# optimizer_conv = optim.Adam(model_conv.parameters(), lr=lr)

exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=10, gamma=0.1)

## 파라미터 불러와 학습하기
model_conv = models.resnet101(pretrained=True)
num_ftrs = model_conv.fc.in_features
model_conv.fc = nn.Linear(num_ftrs, 3)

model_conv.load_state_dict(torch.load("/content/drive/MyDrive/Colab Notebooks/DeepLearning_6024/resnet101_best.pt"))

model_conv = model_conv.to(device)

if torch.cuda.is_available():
    model_conv.cuda()

## Loss function
criterion = nn.CrossEntropyLoss().to(device)

optimizer_conv = optim.SGD(model_conv.parameters(), lr=0.1e-3, momentum=0.9)
# optimizer_conv = optim.Adam(model_conv.parameters(), lr=lr)

exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=10, gamma=0.1)

num_epoch = 10
model_conv = train_model(model_conv, criterion, optimizer_conv, exp_lr_scheduler, num_epochs=num_epoch) #, exp_lr_scheduler

torch.save(model_conv.state_dict(), "/content/drive/MyDrive/Colab Notebooks/DeepLearning_6024/resnet101_new1.pt")